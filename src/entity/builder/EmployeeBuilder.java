// CHECKSTYLE:OFF
/**
 * Source code generated by Fluent Builders Generator Do not modify this file
 * See generator home page at:
 * http://code.google.com/p/fluent-builders-generator-eclipse-plugin/
 */

package entity.builder;

import java.util.Date;
import javax.xml.datatype.XMLGregorianCalendar;
import entity.ContactInfo;
import entity.Data;
import entity.Employee;
import entity.Person;

// TODO: Auto-generated Javadoc
/**
 * The Class EmployeeBuilder.
 */
public class EmployeeBuilder extends EmployeeBuilderBase<EmployeeBuilder> {

	/**
	 * Employee.
	 * 
	 * @return the employee builder
	 */
	public static EmployeeBuilder employee() {
		return new EmployeeBuilder();
	}

	/**
	 * Instantiates a new employee builder.
	 */
	public EmployeeBuilder() {
		super(new Employee());
	}

	/**
	 * Builds the.
	 * 
	 * @return the employee
	 */
	public Employee build() {
		return getInstance();
	}
}

class EmployeeBuilderBase<GeneratorT extends EmployeeBuilderBase<GeneratorT>> {
	private final Employee instance;

	protected EmployeeBuilderBase(Employee aInstance) {
		instance = aInstance;
	}

	protected Employee getInstance() {
		return instance;
	}

	@SuppressWarnings("unchecked") public GeneratorT withPerson(Person aValue) {
		instance.setPerson(aValue);

		return (GeneratorT) this;
	}

	public PersonPersonBuilder withPerson() {
		Person obj = new Person();

		withPerson(obj);

		return new PersonPersonBuilder(obj);
	}

	@SuppressWarnings("unchecked") public GeneratorT withData(Data aValue) {
		instance.setData(aValue);

		return (GeneratorT) this;
	}

	public DataDataBuilder withData() {
		Data obj = new Data();

		withData(obj);

		return new DataDataBuilder(obj);
	}

	@SuppressWarnings("unchecked") public GeneratorT withModifiedDate(Date aValue) {
		instance.setModifiedDate(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked") public GeneratorT withId(Long aValue) {
		instance.setId(aValue);

		return (GeneratorT) this;
	}

	public class PersonPersonBuilder extends
			PersonBuilderBase<PersonPersonBuilder> {
		public PersonPersonBuilder(Person aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked") public GeneratorT endPerson() {
			return (GeneratorT) EmployeeBuilderBase.this;
		}
	}

	public class DataDataBuilder extends DataBuilderBase<DataDataBuilder> {
		public DataDataBuilder(Data aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked") public GeneratorT endData() {
			return (GeneratorT) EmployeeBuilderBase.this;
		}
	}

	public static class DataBuilderBase<GeneratorT extends DataBuilderBase<GeneratorT>> {
		private final Data instance;

		protected DataBuilderBase(Data aInstance) {
			instance = aInstance;
		}

		protected Data getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked") public GeneratorT withCreditCard(
				String aValue) {
			instance.setCreditCard(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked") public GeneratorT withOccupationTitle(
				String aValue) {
			instance.setOccupationTitle(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked") public GeneratorT withDepartmentTitle(
				String aValue) {
			instance.setDepartmentTitle(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked") public GeneratorT withHireDate(Date aValue) {
			instance.setHireDate(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked") public GeneratorT withHourRate(double aValue) {
			instance.setHourRate(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked") public GeneratorT withId(Long aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}
	}

	public static class PersonBuilderBase<GeneratorT extends PersonBuilderBase<GeneratorT>> {
		private final Person instance;

		protected PersonBuilderBase(Person aInstance) {
			instance = aInstance;
		}

		protected Person getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked") public GeneratorT withIsMale(boolean aValue) {
			instance.setIsMale(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked") public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked") public GeneratorT withBirthday(
				XMLGregorianCalendar aValue) {
			instance.setBirthday(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked") public GeneratorT withICi(ContactInfo aValue) {
			instance.setICi(aValue);

			return (GeneratorT) this;
		}

		public ICiContactInfoBuilder withICi() {
			ContactInfo obj = new ContactInfo();

			withICi(obj);

			return new ICiContactInfoBuilder(obj);
		}

		@SuppressWarnings("unchecked") public GeneratorT withId(Long aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		public class ICiContactInfoBuilder extends
				ContactInfoBuilderBase<ICiContactInfoBuilder> {
			public ICiContactInfoBuilder(ContactInfo aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked") public GeneratorT endICi() {
				return (GeneratorT) PersonBuilderBase.this;
			}
		}
	}

	public static class ContactInfoBuilderBase<GeneratorT extends ContactInfoBuilderBase<GeneratorT>> {
		private final ContactInfo instance;

		protected ContactInfoBuilderBase(ContactInfo aInstance) {
			instance = aInstance;
		}

		/**
		 * Gets the single instance of ContactInfoBuilderBase.
		 * 
		 * @return single instance of ContactInfoBuilderBase
		 */
		protected ContactInfo getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked") public GeneratorT withId(Long aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}
	}
}
